---
version: "3.8"
services:

  server:
    image: seoz/seoz-server:latest
    container_name: ${NAMESPACE}-server
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        TINI_VERSION: ${TINI_VERSION}
    ports:
    - 5000:5000
    expose:
    - 5000
    depends_on:
    - redis
    - mysql
    labels:
    - "org.label-schema.group=backend"
    - "traefik.enable=true"
    networks:
    - internal
    - web
    restart: unless-stopped

  dashboard:
    image: seoz/seoz-dashboard:latest
    container_name: ${NAMESPACE}-dashboard
    build:
      context: ./admin
      dockerfile: Dockerfile
      args:
        NODE_VERSION: ${NODE_VERSION}
        TINI_VERSION: ${TINI_VERSION}
    expose:
    - 3000
    ports:
    - 3000:3000
    depends_on:
    - server
    networks:
    - web
    labels:
    - "org.label-schema.group=front"
    - "traefik.enable=true"    
    restart: unless-stopped

  postgres:
    image: postgres:${POSTGRES_VERSION}-alpine
    container_name: ${NAMESPACE}-postgres
    # ports:
    # - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    # expose:
    # - ${POSTGRES_PORT}
    networks:
    - internal
    environment:
    - POSTGRES_USER=${POSTGRES_USER}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    - POSTGRES_DB=${POSTGRES_DB}
    volumes:
    - postgres-data:/var/lib/postgresql/data/
    labels:
    - "org.label-schema.group=storage"
    - "traefik.enable=false"
    restart: unless-stopped

  mysql:
    image: mariadb:alpine-${MYSQL_VERSION}
    container_name: ${NAMESPACE}-mariadb
    build:
      context: .docker/alpine/mariadb
      dockerfile: Dockerfile
      args:
        MARIABD_VERSION: ${MYSQL_VERSION}
    environment:
      ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      USER_DATABASE: ${MYSQL_DATABASE}
      USER_NAME: ${MYSQL_USER}
      USER_PASSWORD: ${MYSQL_PASSWORD}
      USER_PRIVILEGES: ALTER, CREATE, DELETE, DROP, INDEX, INSERT, REFERENCES, SELECT, UPDATE
      PASSWORD_LENGTH: ${MYSQL_PASSWORD_LENGTH}
      LOGROTATE_MINSIZE: 10M
      LOGROTATE_MAXAGE: 7
      SKIP_SHOW_DATABASE: "OFF" # If set to ON, will deny the SHOW DATABASES statement to regular users.
      # AUTO_LETS_ENCRYPT: "no"
      # SERVER_NAME: "para-test.gsi-network.com"
      # LOCAL_INFILE: "OFF"
      # SECURE_FILE_PRIV: "/opt/data/import"
      # ROOT_HOST: "%"
    labels:
    - "org.label-schema.group=storage"
    - "traefik.enable=false"
    # ports:
    # - ${MYSQL_PORT}:${MYSQL_PORT}
    # expose:
    # - ${MYSQL_PORT}
    networks:
    - internal
    - web  
    volumes:
    - mysql-data:/var/lib/mysql
    - mysql-logs:/var/log/mysql
    - certs-data:/etc/letsencrypt
    - ./shared/config/mysql:/custom.cnf.d
    command:
    - --slow_query_log=ON
    - --slow_query_log_file=/var/log/mysql/slowlog.log
    - --long_query_time=0
    - --log_slow_verbosity=full    
    - --query_response_time_stats=ON
    - --performance-schema=ON 
    - --innodb_monitor_enable=all
    
  redis:
    image: seoz/redis:${REDIS_VERSION}-alpine
    build:
      context: ./.docker/alpine/redis
      dockerfile: Dockerfile
      args:
        REDIS_VERSION: ${REDIS_VERSION}
        REDIS_LOG_PREFIX_PATH: ${REDIS_LOG_PREFIX_PATH}
    container_name: ${NAMESPACE}-redis
    hostname: redis
    networks:
    - internal    
    volumes:
    - redis-data:/data
    - redis-logs:${REDIS_LOG_PREFIX_PATH}
    labels:
    - "org.label-schema.group=storage"
    - "traefik.enable=false"
    command:
    - "redis-server"
    - "--maxmemory ${REDIS_MEMORY_MAX}"
    - "--maxmemory-policy allkeys-lru"
    - "--logfile ${REDIS_LOG_FILE}"
    restart: unless-stopped

  influxdb:
    image: influxdb:${INFLUXDB_VERSION}-alpine
    container_name: ${NAMESPACE}-influxdb
    # ports:
    # - 8083:8083
    # - 8086:8086
    # - 8090:8090
    # expose:
    # - 8083
    # - 8086
    # - 8090
    environment:
    - INFLUXDB_DB=${INFLUXDB_DB}
    - INFLUXDB_ADMIN_USER=${INFLUXDB_ADMIN_USER}
    - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}   
    networks:
    - internal
    # - web
    volumes:
    - ./shared/data/influxdb/imports:/imports
    - influxdb-data:/var/lib/influxdb
    labels:
    - "org.label-schema.group=monitoring"
    - "traefik.enable=false"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: ${NAMESPACE}-grafana
    expose:
    - ${GF_PORT}
    ports:
    - ${GF_PORT}:${GF_PORT}
    networks:
    - internal
    - web
    depends_on:
    - mysql
    - influxdb
    hostname: grafana
    user: ${CURRENT_UID}
    volumes:
    - ./shared/config/grafana/provisioning:/etc/grafana/provisioning:rw
    - ./shared/config/grafana/provisioning/plugins:/etc/grafana/provisioning/plugins:rw
    - ./shared/config/grafana/provisioning/notifiers:/etc/grafana/provisioning/notifiers:rw
    - ./shared/config/grafana/dashboards:/var/lib/grafana/dashboards:rw
    - ./shared/config/grafana/datasources:/etc/grafana/datasources:rw
    - grafana-data:/var/lib/grafana
    environment:
      GF_INSTALL_PLUGINS: ${GF_INSTALL_PLUGINS}
      GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: ${GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS}
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_PANELS_DISABLE_SANITIZE_HTML: "true"
    labels:
    - "org.label-schema.group=monitoring"
    - "traefik.enable=true"
    restart: unless-stopped

  contrib-yake:
    image: seoz/seoz-contrib-yake:latest
    container_name: ${NAMESPACE}-contrib-yake
    build:
      context: ./contribs/yake
      dockerfile: Dockerfile
      args:
        YAKE_VERSION: ${YAKE_VERSION}
        TINI_VERSION: ${TINI_VERSION}
    environment:
    - YAKE_HOST=${YAKE_HOST}
    - YAKE_PORT=${YAKE_PORT}
    - YAKE_DEBUG=${YAKE_DEBUG}
    ports:
    - ${YAKE_PORT}:${YAKE_PORT}
    expose:
    - ${YAKE_PORT}
    labels:
    - "org.label-schema.group=extractor"
    - "traefik.enable=true"
    networks:
    - web
    restart: unless-stopped    

  contrib-bert-summary:
    image: seoz/seoz-contrib-bert-summary:latest
    container_name: ${NAMESPACE}-contrib-bert-summary
    build:
      context: ./contribs/bert-summary
      dockerfile: Dockerfile
      args:
        TINI_VERSION: ${TINI_VERSION}
    ports:
    - ${BERT_SUMMARY_PORT}:${BERT_SUMMARY_PORT}
    expose:
    - ${BERT_SUMMARY_PORT}
    labels:
    - "org.label-schema.group=extractor"
    - "traefik.enable=true"
    networks:
    - web
    restart: unless-stopped    

networks:
  internal:
    driver: bridge
  web:
    external: true

volumes:
  # Letsencrypt certificates
  certs-data:
  # PostreSQL
  postgres-data:
  # MySQL/MariaDB
  mysql-data:
  mysql-logs:
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/shared/logs/mysql
  # Redis
  redis-data:
  redis-logs:
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/shared/logs/redis  
  grafana-data:
  influxdb-data: